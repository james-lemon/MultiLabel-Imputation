package predictionSets;

import java.util.ArrayList;

import weka.classifiers.*;
import weka.classifiers.bayes.*;
import weka.classifiers.bayes.net.*;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.LinearRegression;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.VotedPerceptron;
import weka.classifiers.lazy.*;
import weka.classifiers.meta.*;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.pmml.consumer.GeneralRegression;
import weka.classifiers.pmml.consumer.NeuralNetwork;
import weka.classifiers.pmml.consumer.PMMLClassifier;
import weka.classifiers.pmml.consumer.Regression;
import weka.classifiers.pmml.consumer.RuleSetModel;
import weka.classifiers.pmml.consumer.SupportVectorMachineModel;
import weka.classifiers.pmml.consumer.TreeModel;
import weka.classifiers.pmml.consumer.GeneralRegression.*;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.M5Rules;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.PART;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.*;
import weka.classifiers.trees.lmt.LMTNode;
import weka.classifiers.trees.lmt.LogisticBase;
import weka.classifiers.trees.m5.M5Base;
import weka.classifiers.trees.m5.PreConstructedLinearModel;
import weka.classifiers.trees.m5.RuleNode;
import mulan.classifier.InvalidDataException;
import mulan.classifier.ModelInitializationException;
import mulan.data.MultiLabelInstances;
import Experiment.IPredictValueSet;
import Experiment.IPredictValues;
import Experiment.PredictionsWithExperiment;

public class RaKelPredictionSet implements IPredictValueSet {

	private ArrayList<Classifier> classifiers = new ArrayList<Classifier>();
	
	public ArrayList<IPredictValues> GetPredictValues() throws InvalidDataException, ModelInitializationException, Exception{
			ArrayList<IPredictValues> output = new ArrayList<IPredictValues>();
			loadClassifiers();
			for(Classifier classifier : classifiers)
			{
				output.add(new RakelPredict("Rakel with " +classifier.getClass().toString(), classifier));
			}
			return output;
			}

	private void loadClassifiers()
	{
		classifiers.add(new AdaBoostM1());
		//classifiers.add(new AdditiveRegression());
		classifiers.add(new AttributeSelectedClassifier());
		classifiers.add(new Bagging());
		//classifiers.add(new BayesNet());
		//classifiers.add(new BayesNetGenerator());
		classifiers.add(new BIFReader());
		classifiers.add(new ClassificationViaRegression());
		classifiers.add(new CostSensitiveClassifier());
		classifiers.add(new CVParameterSelection());
		/*
		classifiers.add(new DecisionStump());
		classifiers.add(new DecisionTable());
		classifiers.add(new EditableBayesNet());
		classifiers.add(new FilteredClassifier());
		classifiers.add(new GaussianProcesses());
		//classifiers.add(new GeneralRegression());
		//classifiers.add(new HoeffdingTree());
		classifiers.add(new IBk());
		classifiers.add(new InputMappedClassifier());
		//classifiers.add(new IteratedSingleClassifierEnhancer());
		classifiers.add(new J48());
		classifiers.add(new JRip());
		classifiers.add(new KStar());
		classifiers.add(new LinearRegression());
		classifiers.add(new LMT());
		//classifiers.add(new LMTNode());
		classifiers.add(new Logistic());
		classifiers.add(new LogisticBase());
		classifiers.add(new LogitBoost());
		classifiers.add(new LWL());
		//classifiers.add(new M5Base());
		classifiers.add(new M5P());
		classifiers.add(new M5Rules());
		classifiers.add(new MultiClassClassifier());
		classifiers.add(new MultiClassClassifierUpdateable());
		classifiers.add(new MultilayerPerceptron());
		//classifiers.add(new MultipleClassifiersCombiner());
		classifiers.add(new MultiScheme());
		classifiers.add(new NaiveBayes());
		classifiers.add(new NaiveBayesMultinomial());
		classifiers.add(new NaiveBayesMultinomialText());
		classifiers.add(new NaiveBayesMultinomialUpdateable());
		classifiers.add(new NaiveBayesUpdateable());
		//classifiers.add(new NeuralNetwork());
		classifiers.add(new OneR());
		//classifiers.add(new ParallelIteratedSingleClassifierEnhancer());
		//classifiers.add(new ParallelMultipleClassifiersCombiner());
		classifiers.add(new PART());
		//classifiers.add(new PMMLClassifier());
		//classifiers.add(new PreConstructedLinearModel());
		classifiers.add(new RandomCommittee());
		classifiers.add(new RandomForest());
		//classifiers.add(new RandomizableClassifier());
		//classifiers.add(new RandomizableIteratedSingleClassifierEnhancer());
		//classifiers.add(new RandomizableMultipleClassifiersCombiner());
		//classifiers.add(new RandomizableParallelIteratedSingleClassifierEnhancer());
		//classifiers.add(new RandomizableParallelMultipleClassifiersCombiner());
		//classifiers.add(new RandomizableSingleClassifierEnhancer());
		classifiers.add(new RandomSubSpace());
		classifiers.add(new RandomTree());
		//classifiers.add(new Regression());
		classifiers.add(new RegressionByDiscretization());
		classifiers.add(new REPTree());
		//classifiers.add(new RuleNode());
		//classifiers.add(new RuleSetModel());
		classifiers.add(new SerializedClassifier());
		classifiers.add(new SGD());
		classifiers.add(new SGDText());
		classifiers.add(new SimpleLinearRegression());
		classifiers.add(new SimpleLogistic());
		//classifiers.add(new SingleClassifierEnhancer());
		classifiers.add(new SMO());
		classifiers.add(new SMOreg());
		classifiers.add(new Stacking());
		//classifiers.add(new SupportVectorMachineModel());
		//classifiers.add(new TreeModel());
		classifiers.add(new Vote());
		classifiers.add(new VotedPerceptron());
		classifiers.add(new ZeroR());
		*/
	}


}

